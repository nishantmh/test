{
  "name": "venn",
  "preferGlobal": false,
  "version": "1.0.2",
  "author": {
    "name": "bitoiu",
    "email": "vmrmonteiro@gmail.com"
  },
  "description": "fluent API library for set operations",
  "repository": {
    "type": "git",
    "url": "https://github.com/bitoiu/venn.git"
  },
  "keywords": [
    "venn",
    "set",
    "intersect",
    "union"
  ],
  "dependencies": {
    "requirejs": "2.1.x",
    "amdefine": ">=0.0.5"
  },
  "devDependencies": {
    "mocha": "1.9.x",
    "chai": "1.5.x",
    "karma": ">=0.8.x",
    "lodash": "1.3.x",
    "karma-mocha": "0.1",
    "karma-requirejs": "0.1",
    "grunt-cli": "~0.1.6",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-release": "~0.6.0",
    "grunt-git": "~0.1.5"
  },
  "scripts": {
    "test": "./node_modules/.bin/karma start --single-run --browsers PhantomJS && mocha"
  },
  "license": "MIT",
  "engines": {
    "node": ">=0.6"
  },
  "readme": "# venn [![Build Status](https://travis-ci.org/bitoiu/venn.png)](https://travis-ci.org/bitoiu/venn) [![NPM version](https://badge.fury.io/js/venn.png)](http://badge.fury.io/js/venn)\n\n## Motivation\n\nOne of these days I was looking for a library that would allow me to do simple set operations, mostly intersection and unions. There's so many that do it, like underscore, the problem I found was that none of them had a fluent API, so I took a take on doing my own.\n\nCompatible with AMD and node.\n\n### getting started \n\nA venn set is just an array on steroids:\n\n```javascript\n\n  var venn = require(\"venn\")\n  venn.create([1,2])   \n  console.log(venn) // [1,2]\n\n```\n\n### union\n\nYou can now chain operations to this set, using `union` or `or`:\n\n```javascript\n  venn.create([1,2])\n      .union([1,2,3,4])\n      .or([5]) // [1,2,3,4,5]\n```\n\n`union` and `or` are just alias for the same operation.\n\n### intersection\n\n\n```javascript\n    venn.create([1,2])\n      .union([1,2,3,4]) \n      .intersection([1,5]) // [1]\n```\n\nif you prefer you can also use `and` instead of `intersection`\n\n\n### not\n\nIf you want to be negative about it, you can check out `not`\n\n```javascript\n    venn.create([1,2,3,4,5])\n      .not([4])\n      .not([5]) // [1,2,3]\n```\n\n### chaining everything\n\nOr a mix of everything\n\n```javascript\n    venn.create([1,2])\n      .or([1,2,3,4,5])\n      .and([1,5])\n      .or([2]) // [1,5,2]\n```\n\n### Objects\n\nIf you're crazy you can use venn without a key function. We'll just figure it out how to index the objects.\n\n```javascript\n    venn.create([\n        {name: \"vitor\", age: \"23\"}\n      , {name: \"khov\",  age: \"24\"}\n      , {name: \"pat\",   age: \"30\"}])\n      .intersection([\n        {name: \"vitor\",  age: \"23\"}\n      , {name: \"newguy\", age: \"0\"}\n      , {name: \"pat\",    age: \"50\"}])\n      .union([\n        {name: \"khov\", age : \"10\"}\n      , {name: \"nuno\", age : \"20\"}]) \n\n    // vitor, khov and nuno\n```\n\n### Key function\n\nBut really, write your own key function:\n\n```javascript\n  \n    var myKeyFunction = function(item) {\n      return item.name\n    }\n    \n    venn.create([\n        {name: \"vitor\", age: \"100\"}\n      , {name: \"khov\",  age: \"100\"}], myKeyFunction)\n      .and([\n        {name: \"vitor\", age: \"0\"}\n      , {name: \"khov\",  age: \"0\"}\n      .or([\n        {name: \"khov\",  age : \"-100\"}\n      , {name: \"nuno\",  age : \"20\"}]) \n   \n    // vitor, khov(the first of them), nuno\n```\n\n### Some notes\n\n* The keyFunction only needs to be set once for each venn object (as you would expect)\n* Don't forget if you apply a built-in array function like `filter` or `map` the returning object is not a venn object (as you would once again expect)\n\nLet me know if there are improvements I can do to the library. I might take some time to implement the other less used set operations.\n\n",
  "readmeFilename": "README.md",
  "_id": "venn@1.0.2",
  "dist": {
    "shasum": "088e559bf485742b2e2050283ae9a50714338508",
    "tarball": "https://registry.npmjs.org/venn/-/venn-1.0.2.tgz"
  },
  "_from": "venn@1.0.2",
  "_npmVersion": "1.2.17",
  "_npmUser": {
    "name": "bitoiu",
    "email": "vmrmonteiro@gmail.com"
  },
  "maintainers": [
    {
      "name": "bitoiu",
      "email": "vmrmonteiro@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "088e559bf485742b2e2050283ae9a50714338508",
  "_resolved": "https://registry.npmjs.org/venn/-/venn-1.0.2.tgz"
}
